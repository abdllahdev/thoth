app Todo {
	title: "Todo App Created by Ra",
	auth: {
		userModel: User,
		idField: id,
		usernameField: username,
		passwordField: password,
		signupForm: SignupFrom,
		loginForm: LoginForm,
		logoutButton: LogoutButton,
		onAuthFailedRedirectTo: "/login"
	}
}

model User {
	id        Int     @id
	username  String  @unique
	password  String
	firstName String
	lastName  String
}

model Task {
	id        Int      @id
	title     String
	isDone    Boolean  @default(false)
	createdAt DateTime @default(now)
	updatedAt DateTime @updatedAt
}

@on(Task)
@permission(isAuthenticated)
query<findMany> getTasks : Task[] {
	search: { title, isDone }
}

@on(Task)
@permission(isAuthenticated)
query<findUnique> getTaskById {
	where: { id }
}

@on(Task)
@permission(isAuthenticated)
query<create> createTask {
	data: {
		title
	}
}

@on(Task)
@permission(isAuthenticated, owns)
query<update> updateTaskById {
	where: { id },
	data: { title, isDone }
}

@on(Task)
@permission(isAuthenticated, owns)
query<delete> deleteTaskById {
	where: { id }
}

component TaskComponent(task: Task) {
	render(
		<div className={ if task.isDone then "text-green-500" else "text-red-500" }>
			<div>{ task.title }</div>
			<div>{ if task.isDone then "YES" else "NO" }</div>
			<div>{ task.createdAt }</div>
		</div>
	)
}

component<findMany:getTasks as tasks> TasksComponent {
	onError: render(
		<div>{ "An error occured" }</div>
	)

	onLoading: render(
		<div>{ "Loading..." }</div>
	)

	onSuccess: render(
		<>
			{
				for task in tasks: (
					<TaskComponent task={ task } />
				)
			}
		</>
	)
}

component<create:createTask> TaskCreateForm {
	formFields: {
		title: {
			type: TextField,
			isVisible: true
		}
	},

	formButton: {
		name: "Create"
	}
}

component<delete:deleteTaskById> TaskDeleteButton {
	formButton: {
		name: "Delete"
	}
}

@at("/")
@permission(isAuthenticated)
page Home {
	render(
		<TaskCreateForm />
		<TasksComponent />
	)
}
