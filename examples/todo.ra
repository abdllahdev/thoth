app Todo {
	title: "Todo App Created by Ra",
	notFound: NotFoundPage,
	auth: {
		userModel: User,
		idField: id,
		usernameField: username,
		passwordField: password,
		signupUsing: SignupFrom,
		loginUsing: LoginForm,
		logoutUsing: LogoutButton,
		onSuccessRedirectTo: "/",
		onFailRedirectTo: "/login"
	}
}

model User {
	id        Int     @id
	username  String  @unique
	password  String
}

model Task {
	id        Int      @id
	title     String
	isDone    Boolean  @default(false)
	createdAt DateTime @default(now)
	updatedAt DateTime @updatedAt
}

@on(Task)
@permission(isAuthenticated)
query<findMany> getTasks : Task[] {
	search: { title, isDone }
}

@on(Task)
@permission(isAuthenticated)
query<findUnique> getTaskById {
	where: { id }
}

@on(Task)
@permission(isAuthenticated)
query<create> createTask {
	data: {
		title
	}
}

@on(Task)
@permission(isAuthenticated)
query<update> updateTaskById {
	where: { id },
	data: { title, isDone }
}

@on(Task)
@permission(isAuthenticated)
query<delete> deleteTaskById {
	where: { id }
}

component TaskComponent(task: Task) {
	render(
		<div className="text-gray-900">
			<div>{ task.title }</div>
			<div>{ task.createdAt }</div>
		</div>
	)
}

component<findMany:getTasks as tasks> TasksComponent {
	onError: render(
		<div>{ "An error occured" }</div>
	)

	onLoading: render(
		<div>{ "Loading..." }</div>
	)

	onSuccess: render(
		<>
			{
				for task in tasks: (
					<>
						<TaskComponent task={ task } />
						<div className="border-y border-black"></div>
					</>
				)
			}
		</>
	)
}

component<create:createTask> TaskCreateForm {
	formInputs: {
		title: {
			type: TextInput,
			isVisible: true,
			style: "shadow appearance-none border rounded w-full border py-2 px-3 text-gray-700 leading-tight"
		}
	},

	formButton: {
		name: "Create",
		style: "ml-2 py-2 px-3 text-white bg-green-500 rounded-md"
	}
}

component<delete:deleteTaskById> TaskDeleteButton {
	formButton: {
		name: "Delete"
	}
}

component<signupForm> SignupForm {
	formInputs: {
		username: {
			type: TextInput,
			isVisible: true
		},
		password: {
			type: PasswordInput,
			isVisible: true
		}
	},

	formButton: {
		name: "Sign Up",
		style: "ml-2 py-2 px-3 text-white bg-green-500 rounded-md"
	}
}

component<loginForm> LoginForm {
	formInputs: {
		username: {
			type: TextInput,
			isVisible: true
		},
		password: {
			type: PasswordInput,
			isVisible: true
		}
	},

	formButton: {
		name: "Login",
		style: "ml-2 py-2 px-3 text-white bg-green-500 rounded-md"
	}
}

component<logoutButton> LogoutButton {
	formButton: {
		name: "Logout"
	}
}

@at("/")
page Home {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<div className="text-white">{ "Home Page" }</div>
		</div>
	)
}

@at("/tasks")
@permission(isAuthenticated)
page Tasks {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<div className="px-40 py-14 rounded-xl bg-white">
				<TaskCreateForm />
				<div className="py-2"></div>
				<div className="font-bold text-size-[24px] py-2">{ "Tasks" }</div>
				<TasksComponent />
			</div>
		</div>
	)
}

@at("/login")
page LoginPage {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<LoginForm/>
		</div>
	)
}

@at("/signup")
page SignupPage {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<SignupForm/>
		</div>
	)
}
