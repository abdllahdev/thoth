model User {
	id        Int     @id
	firstName String
	lastName  String
}

model Task {
	id        Int      @id
	title     String
	isDone    Boolean  @default(false)
	createdAt DateTime @default(now)
	updatedAt DateTime @updatedAt
}

@on(Task)
@permission(isAuth)
query<findMany> getTasks(search: { title, isDone }) : Task[]

@on(Task)
@permission(isAuth)
query<findUnique> getTaskById(where: id)

@on(Task)
@permission(isAuth)
query<create> createTask(data: { title })

@on(Task)
@permission(isAuth, owns)
query<update> updateTaskById(where: id, data: { title, isDone })

@on(Task)
@permission(isAuth, owns)
query<delete> deleteTaskById(where: id)

component TaskComponent(task: Task) {
	render(
		<div className={ if task.isDone then "text-green-500" else "text-red-500" }>
			<div>{ task.title }</div>
			<div>{ if task.isDone then "YES" else "NO" }</div>
			<div>{ task.createdAt }</div>
		</div>
	)
}

component<fetchMany:getTasks as tasks> TasksComponent {
	onError => render(
		<div>{ "An error occured" }</div>
	)

	onLoading => render(
		<div>{ "Loading..." }</div>
	)

	onSuccess => render(
		<>
			{
				for task in tasks =>
					<TaskComponent task={ task } />
			}
		</>
	)
}

component<create:createTask> TaskCreateForm {
	formFields => {
	 title: <input type="text" />
	}

	formButton => <button>{ "Submit" }</button>
}

@at("/")
@permission(isAuth)
page Home {
	render(
		<div>
			<TasksComponent />
			<TaskCreateForm />
		</div>
	)
}
