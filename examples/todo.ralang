app Todo {
	title: "Todo App Created by Ra",
	auth: {
		userModel: User,
		idField: id,
		isOnlineField: isOnline,
		lastActiveField: lastActive,
		usernameField: username,
		passwordField: password,
		onSuccessRedirectTo: "/",
		onFailRedirectTo: "/login"
	}
}

model User {
	id         Int       @id
	username   String    @unique
	password   String    @ignore
	isOnline	 Boolean	 @default(false)
	lastActive DateTime  @default(Now)
	tasks 		 Task[]
}

model Task {
	id        Int      @id
	title     String
	isDone    Boolean  @default(false)
	user 			User 		 @relation(userId, id)
	userId		Int
	createdAt DateTime @default(Now)
	updatedAt DateTime @updatedAt
}

@model(Task)
@permissions(IsAuth, OwnsRecord)
query<FindMany> getTasks {
	search: [ title, isDone ]
}

@model(Task)
@permissions(IsAuth)
query<Create> createTask {
	data: {
		fields: [title],
		relationFields: {
			user: connect id with userId
		}
	}
}

@model(Task)
@permissions(IsAuth, OwnsRecord)
query<Delete> deleteTaskById {
	where: [ id ]
}

component<Create> TaskCreateForm {
	actionQuery: createTask(),
	globalStyle: {
		form: "flex mt-4"
	},
	formInputs: {
		title: {
			style: "flex w-full",
			input: {
				type: TextInput,
				placeholder: "Enter task title",
				isVisible: true,
				style: "shadow border rounded py-2 px-3 w-full mr-4 text-grey-darker"
			}
		},
		user: {
			input: {
				type: RelationInput,
				isVisible: false,
				defaultValue: connect id with LoggedInUser.id
			}
		}
	},
	formButton: {
		name: "Create",
		style: "rounded-md bg-teal-500 text-white px-4 py-2"
	}
}

component<Delete> TaskDeleteButton(id: Int) {
	actionQuery: deleteTaskById({
		where: id
	}),
	formButton: {
		name: "Delete",
		style: "rounded-md bg-red-500 text-white px-4 py-2"
	}
}

component TaskComponent(task: Task) {
	render(
		<div className="flex mb-4 items-center">
			<div className="w-full text-gray-500 text-xl">{ task.title }</div>
			<TaskDeleteButton id={task.id} />
		</div>
	)
}

component<FindMany> TasksComponent {
	findQuery: getTasks() as tasks,
	onError: render(
		<div>{ "An error occured" }</div>
	),
	onLoading: render(
		<div>{ "Loading..." }</div>
	),
	onSuccess: render(
		<>
				[% for task in tasks %]
					<div>
						<TaskComponent task={ task } />
					</div>
				[% endfor %]
		</>
	)
}

component<SignupForm> MySignupForm {
	globalStyle: {
		form: "bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4",
		formInput: "appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",
		formInputLabel: "block text-gray-700 font-bold mb-2"
	},
	formInputs: {
		username: {
			label: {
				name: "Username"
			},
			input: {
				type: TextInput,
				placeholder: "Enter username"
			}
		},
		password: {
			label: {
				name: "Password"
			},
			input: {
				type: PasswordInput,
				placeholder: "Enter password"
			}
		}
	},
	formButton: {
		name: "Signup",
		style: "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
	}
}

component<LoginForm> MyLoginForm {
	globalStyle: {
		form: "bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4",
		formInput: "appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",
		formInputLabel: "block text-gray-700 font-bold mb-2"
	},
	formInputs: {
		username: {
			label: {
				name: "Username"
			},
			input: {
				type: TextInput,
				placeholder: "Enter username"
			}
		},
		password: {
			label: {
				name: "Password"
			},
			input: {
				type: PasswordInput,
				placeholder: "Enter password"
			}
		}
	},
	formButton: {
		name: "Login",
		style: "w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
	}
}

component<LogoutButton> MyLogoutButton {
	formButton: {
		name: "Logout",
		style: "inline-block align-baseline font-bold text-sm text-red-500 hover:text-red-800"
	}
}

@route("/")
@permissions(IsAuth)
page Tasks {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<div className="space-y-2">
				<div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
					<div className="mb-4">
						<h1 className="text-grey-darkest text-xl font-bold mb-4">{"Todo List"}</h1>
						<TaskCreateForm />
					</div>
					<TasksComponent />
				</div>
				<MyLogoutButton />
			</div>
		</div>
	)
}

@route("/login")
page LoginPage {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<div className="space-y-2">
				<span className="text-xl text-white">{"Login form"}</span>
				<MyLoginForm />
				<a className="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800" href="/signup">
        	{ "Sign Up" }
     		</a>
			</div>
		</div>
	)
}

@route("/signup")
page SignupPage {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<div className="space-y-2">
				<span className="text-xl text-white">{"Sign up form"}</span>
				<MySignupForm />
				<a className="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800" href="/signup">
        	{ "Login" }
     		</a>
			</div>
		</div>
	)
}
