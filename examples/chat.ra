app ChatRoom {
	title: "Chat Room Created by Ra",
	auth: {
		userModel: User,
		idField: id,
		usernameField: username,
		passwordField: password,
		onSuccessRedirectTo: "/",
		onFailRedirectTo: "/login"
	}
}

model User {
	id        Int       @id
	username  String    @unique
	password  String
	message   Message[]
}

model Message {
	id        Int      @id
  content   String
	user 			User 		 @relation(userId, id)
	userId		Int
	createdAt DateTime @default(Now)
	updatedAt DateTime @updatedAt
}

@on(Message)
@permission(IsAuth)
query<Create> createMessage {
	data: {
		fields: [content],
		relationFields: {
			user: connect id with userId
		}
	}
}

@on(Message)
@permission(IsAuth)
query<FindMany> getMessages {
	search: [content]
}

component<FindMany> MessagesComponent {
	findQuery: getMessages as messages,
	onError: render(
		<div>{ "An error occured" }</div>
	),
	onLoading: render(
		<div>{ "Loading..." }</div>
	),
	onSuccess: render(
		<>
			[% for message in messages %]
				<div className="flex space-x-3 text-white">
					<div>{ message.user }</div>
					<div>{ message.content }</div>
				</div>
			[% endfor %]
		</>
	)
}

component<Create> CreateMessageForm  {
	actionQuery: createMessage,
	formInputs: {
		content: {
			input: {
				type: TextInput,
				placeholder: "Enter message"
			}
		},
		user: {
			input: {
				type: RelationInput,
				isVisible: false,
				defaultValue: connect id with LoggedInUser.id
			}
		}
	},
	formButton: {
		name: "Send",
		style: "ml-2 py-2 px-3 text-white bg-green-500 rounded-md"
	}
}

component<SignupForm> MySignupForm {
	globalStyle: {
		form: "space-y-2"
	},
	formInputs: {
		username: {
			input: {
				type: TextInput,
				placeholder: "Enter username"
			}
		},
		password: {
			input: {
				type: PasswordInput,
				placeholder: "Enter password"
			}
		}
	},
	formButton: {
		name: "Sign Up",
		style: "ml-2 py-2 px-3 text-white bg-green-500 rounded-md"
	}
}

component<LoginForm> MyLoginForm {
	globalStyle: {
		form: "space-y-2"
	},
	formInputs: {
		username: {
			input: {
				type: TextInput,
				placeholder: "Enter username"
			}
		},
		password: {
			input: {
				type: PasswordInput,
				placeholder: "Enter password"
			}
		}
	},
	formButton: {
		name: "Login",
		style: "ml-2 py-2 px-3 text-white bg-green-500 rounded-md"
	}
}

component<LogoutButton> MyLogoutButton {
	formButton: {
		name: "Logout"
	}
}

@at("/")
@permission(IsAuth)
page Home {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<div className="space-y-2">
				<MessagesComponent />
				<CreateMessageForm />
				<MyLogoutButton />
			</div>
		</div>
	)
}

@at("/login")
page LoginPage {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<div className="space-y-2">
				<span className="text-xl text-white">{"Login form"}</span>
				<MyLoginForm />
			</div>
		</div>
	)
}

@at("/signup")
page SignupPage {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<div className="space-y-2">
				<span className="text-xl text-white">{"Sign up form"}</span>
				<MySignupForm />
			</div>
		</div>
	)
}
