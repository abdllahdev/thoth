app ChatRoom {
	title: "Chat Room Created by Ra",
	auth: {
		userModel: User,
		idField: id,
		isOnlineField: isOnline,
		lastActiveField: lastActive,
		usernameField: username,
		passwordField: password,
		onSuccessRedirectTo: "/",
		onFailRedirectTo: "/login"
	}
}

model User {
	id         Int       @id
	username   String    @unique
	password   String
	isOnline	 Boolean	 @default(false)
	lastActive DateTime  @default(Now)
	messages   Message[]
}

model Message {
	id        Int      @id
  content   String
	user 			User 		 @relation(userId, id)
	userId		Int
	createdAt DateTime @default(Now)
	updatedAt DateTime @updatedAt
}

@model(Message)
@permissions(IsAuth)
query<Create> createMessage {
	data: {
		fields: [content],
		relationFields: {
			user: connect id with userId
		}
	}
}

@model(Message)
@permissions(IsAuth)
query<FindMany> getMessages {
	search: [content]
}

@model(User)
@permissions(IsAuth)
query<FindMany> getUsers {
	search: [username]
}

component<FindMany> MessagesComponent {
	findQuery: getMessages as messages,
	onError: render(
		<div>{ "An error occured" }</div>
	),
	onLoading: render(
		<div>{ "Loading..." }</div>
	),
	onSuccess: render(
    <div className="flex flex-col gap-2 flex-1">
			[% for message in messages %]
				<div
					key={message.id}
					className=[% if message.userId == LoggedInUser.id %]
											{ "flex gap-2 justify-end" }
										[% else %]
											{ "flex gap-2" }
										[% endif %]>
					<div
						className=[%  if message.userId == LoggedInUser.id %]
												{ "p-2 rounded-lg max-w-lg bg-blue-100" }
											[% else %]
												{ "p-2 rounded-lg max-w-lg bg-gray-100" }
											[% endif %]>
						<p>{message.content}</p>
						<span className="text-gray-500 text-sm">
							{message.user.username} {" â€¢ "}
							{message.createdAt}
						</span>
					</div>
				</div>
			[% endfor %]
    </div>
	)
}

component<FindMany> OnlineUsersComponent {
	findQuery: getUsers as users,
	onError: render(
		<div>{ "An error occured" }</div>
	),
	onLoading: render(
		<div>{ "Loading..." }</div>
	),
	onSuccess: render(
		<div className="flex flex-col gap-2">
      <div className="font-bold text-lg mb-2">{ "Online Users" }</div>
			[% for user in users %]
				<div
          className=[% if user.id == LoggedInUser.id %]
											{ "flex items-center gap-2 font-bold" }
										[% else %]
											{ "flex items-center gap-2" }
										[% endif %]>
          <div
            className=[% if user.isOnline %]
												{ "w-3 h-3 rounded-full bg-green-500" }
											[% else %]
												{ "w-3 h-3 rounded-full bg-gray-500" }
											[% endif %]></div>
          <div>{ user.username }</div>
        </div>
			[% endfor %]
    </div>
	)
}

component<Create> CreateMessageForm  {
	globalStyle: {
		form: "flex w-full"
	},
	actionQuery: createMessage,
	formInputs: {
		content: {
			style: "flex w-full",
			input: {
				type: TextInput,
				placeholder: "Type your message here...",
				style: "flex-1 rounded-md border-gray-300 mr-2 px-4 py-2"
			}
		},
		user: {
			input: {
				type: RelationInput,
				isVisible: false,
				defaultValue: connect id with LoggedInUser.id
			}
		}
	},
	formButton: {
		name: "Send",
		style: "rounded-md bg-blue-500 text-white px-4 py-2"
	}
}

component<SignupForm> MySignupForm {
	globalStyle: {
		form: "space-y-2"
	},
	formInputs: {
		username: {
			input: {
				type: TextInput,
				placeholder: "Enter username"
			}
		},
		password: {
			input: {
				type: PasswordInput,
				placeholder: "Enter password"
			}
		}
	},
	formButton: {
		name: "Sign Up",
		style: "ml-2 py-2 px-3 text-white bg-green-500 rounded-md"
	}
}

component<LoginForm> MyLoginForm {
	globalStyle: {
		form: "space-y-2"
	},
	formInputs: {
		username: {
			input: {
				type: TextInput,
				placeholder: "Enter username"
			}
		},
		password: {
			input: {
				type: PasswordInput,
				placeholder: "Enter password"
			}
		}
	},
	formButton: {
		name: "Login",
		style: "ml-2 py-2 px-3 text-white bg-green-500 rounded-md"
	}
}

component<LogoutButton> MyLogoutButton {
	formButton: {
		name: "Logout",
		style: "w-full py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
	}
}

@route("/")
@permissions(IsAuth)
page Home {
	render(
    <div className="flex justify-center">
      <div className="flex flex-col w-full h-screen border shadow">
        <div className="flex flex-row h-full">
          <div className="bg-gray-100 flex flex-col w-1/4 p-4">
            <OnlineUsersComponent />
						<div className="flex justify-end mt-auto">
							<MyLogoutButton />
						</div>
          </div>
          <div className="flex flex-col w-3/4 p-4">
            <div className="flex-1 overflow-y-auto">
              <MessagesComponent />
            </div>
            <div className="bg-gray-100 flex flex-row p-4 rounded-lg">
              <div className="flex-1">
                <CreateMessageForm />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
	)
}

@route("/login")
page LoginPage {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<div className="space-y-2">
				<span className="text-xl text-white">{"Login form"}</span>
				<MyLoginForm />
			</div>
		</div>
	)
}

@route("/signup")
page SignupPage {
	render(
		<div className="flex h-screen items-center justify-center bg-slate-800">
			<div className="space-y-2">
				<span className="text-xl text-white">{"Sign up form"}</span>
				<MySignupForm />
			</div>
		</div>
	)
}
