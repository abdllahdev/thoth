import { z } from 'zod';
{% if type == "login" or type == "signup" %}
import { useNavigate } from "react-router";
{% endif %}
import { useEffect, useState } from "react";
import { User } from "@/types";
import Form, { FormInputType } from "@/ui/Form";
import * as Queries from "@/services"

{% if args %}
type {{ id }}Props = {
  {% for arg in args %}
  {{ arg.id }}{{ arg.type }};
  {% endfor %}
}
{% endif %}

const {{ id }}ValidationScheme = z.object({
{% for rule in form_validation_scheme %}
  {% if rule and rule.rule %}
    {{ rule.id }}: {{ rule.rule }},
  {% endif %}
{% endfor %}
});

const {{ id }} = ({% if args %} { {% for arg in args %}{{ arg.id }},{% endfor %} }: {{ id }}Props {% endif %}) => {
  {% if type == "login" or type == "signup" %}
  const navigate = useNavigate();

  const storedUser = localStorage.getItem("LoggedInUser")
    ? JSON.parse(localStorage.getItem("LoggedInUser") as string)
    : undefined;
  const [LoggedInUser, setUser] = useState<User | undefined>(storedUser);

  const handleResponse = async (response: User) => {
    localStorage.setItem("LoggedInUser", JSON.stringify(response));
    const storedUser = localStorage.getItem("LoggedInUser") as string;
    setUser(JSON.parse(storedUser) as User);
  };

  useEffect(() => {
    if (LoggedInUser) {
      navigate("{{ on_success_redirect_to }}");
    }
  }, [LoggedInUser]);
  {% else %}
  const storedUser = localStorage.getItem("LoggedInUser")
    ? JSON.parse(localStorage.getItem("LoggedInUser") as string)
    : undefined;
  const [LoggedInUser, _] = useState<User | undefined>(storedUser);
  {% endif %}

  return (
    <>
      <Form
        formFunc={ Queries.{% if type == "signup" %}signup{% elif type == "login" %}login{% else %}{{ action_func }}{% endif %} }
        {% if where_arg %}
        where={ {{ where_arg }} }
        {% endif %}
        httpMethod= {% if type == "update" %}"put"{% else %}"post"{% endif %}
        {% if requires_auth %}
        accessToken={ LoggedInUser.accessToken }
        {% endif %}
        formValidationSchema={ {{ id }}ValidationScheme}
        {% for style in global_style %}
          {{ style.id }}Style="{{ style.value }}"
        {% endfor %}
        {% if type == "login" or type == "signup" %}handleResponse={handleResponse}{% endif %}
        formElements={[
          {% for input in form_inputs %}
            {
              {% if input.wrapper_style %}
              style: "{{ input.wrapper_style }}",
              {% endif %}

              {% if input.label_attrs %}
              formInputLabel: {
                {% for attr in input.label_attrs %}
                  {{ attr.name }}: "{{ attr.value }}",
                {% endfor %}
              },
              {% endif %}

              formInput: {
                {% for attr in input.input_attrs %}
                  {% if attr.name == "defaultValue" %}
                  {{ attr.name }}: {{ attr.value }},
                  {% elif attr.name == "isVisible" %}
                  {{ attr.name }}: {% if attr.value == "true" %}true{% else %}false{% endif %},
                  {% elif attr.name == "type" %}
                  type: FormInputType.{{ attr.value }},
                  {% else %}
                  {{ attr.name }}: "{{ attr.value }}",
                  {% endif %}
                {% endfor %}
              }
            },
          {% endfor %}
        ]}
        formButton={{ "{{" }}
          {% for attr in form_button %}
            {{ attr.name }}: "{{ attr.value }}",
          {% endfor %}
        {{ "}}" }}
      />
    </>
  );
};

export default {{ id }};
