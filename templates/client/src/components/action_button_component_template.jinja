{% if type == "logout" %}
import { useNavigate } from "react-router";
import { useEffect, useState } from "react";
import { User } from "@/types";
{% endif %}
import Button from "@/ui/Button";
import * as Queries from "@/services"

{% if args %}
type {{ id }}Props = {
  {% for arg in args %}
  {{ arg.id }}{{ arg.type }};
  {% endfor %}
}
{% endif %}

const {{ id }} = ({% if args %} { {% for arg in args %}{{ arg.id }},{% endfor %} }: {{ id }}Props {% endif %}) => {
  {% if type == "logout" %}
  const navigate = useNavigate();
  const storedUser = localStorage.getItem("LoggedInUser")
    ? JSON.parse(localStorage.getItem("LoggedInUser") as string)
    : undefined;
  const [LoggedInUser, setUser] = useState<User | undefined>(storedUser);

  useEffect(() => {
    if (!LoggedInUser) {
      navigate("{{ on_fail_redirect_to }}");
    }
  }, [LoggedInUser]);
  {% else %}
  const url = Queries.{{ action_func }}( {{ args[0].id }} );
  {% endif %}

  const handleOnClick = async () => {
    {% if type == "logout" %}
    localStorage.removeItem("LoggedInUser");
    setUser(undefined);
    {% else %}
    let headers: { [x: string]: string } = {
      'Content-Type': 'application/json',
    };

    if (LoggedInUser.accessToken) {
      headers['Authorization'] = `Bearer ${LoggedInUser.accessToken}`;
    }

    const response = await fetch(url, {
      method: 'delete',
      headers,
    });
    {% endif %}
  };

  return (
    <>
      <Button
        handleOnClick={{ "{" }}handleOnClick{{ "}" }}
        {% for attr in form_button %}
          {{ attr.name }}="{{ attr.value }}"
        {% endfor %}
      />
    </>
  );
};

export default {{ id }};
