import { useState } from "react";
import { User } from "@/types";
import {  {{ variable.scalar_type  }}  } from "@/types";
import useFetch from "@/libs/hooks/useFetch";
{% for imported_component in imported_components %}
  import {{ imported_component }} from "./{{ imported_component }}"
{% endfor %}
import * as Queries from "@/services"

const baseUrl = 'http://localhost:4000';

const {{ id }} = () => {
  const storedUser = localStorage.getItem("LoggedInUser");
  const [LoggedInUser, _] = useState<User | undefined>(
    storedUser ? (JSON.parse(storedUser) as User) : undefined
  );

  const { data: {{ variable.id }}, isLoading, error } = useFetch<{{ variable.type }}>( Queries.{{ find_func }},
    {% if model %}
    `${baseUrl}/{{ model }}/events?accessToken=${LoggedInUser.accessToken}`
    {% endif %} );

  if (error) {
    return (
      {%- autoescape false -%}
        {{ on_error }}
      {% endautoescape -%})
  };

  if (isLoading) {
    return (
      {%- autoescape false -%}
        {{ on_loading }}
      {% endautoescape -%})
  };

  return (
    <>
      {%- autoescape false -%}
        {{ render_expression }}
      {% endautoescape -%}
    </>
  );
};

export default {{ id }};
