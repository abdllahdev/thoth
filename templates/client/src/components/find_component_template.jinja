{% if variable.scalar_type != "User" %}
import {  {{ variable.scalar_type  }}  } from "@/types";
{% endif %}
import useFetch from "@/libs/hooks/useFetch";
{% if requires_auth %}
import { useState } from "react";
import { User } from "@/types";
{% endif %}
{% for imported_component in imported_components %}
  import {{ imported_component }} from "./{{ imported_component }}"
{% endfor %}
import * as Queries from "@/services"

{% if args %}
type {{ id }}Props = {
  {% for arg in args %}
  {{ arg.id }}{{ arg.type }};
  {% endfor %}
}
{% endif %}

const {{ id }} = ( {% if args %} { {% for arg in args %}{{ arg.id }},{% endfor %} }: {{ id }}Props {% endif %} ) => {
  {% if requires_auth %}
  const storedUser = localStorage.getItem("LoggedInUser");
  const [LoggedInUser, _] = useState<User | undefined>(
    storedUser ? (JSON.parse(storedUser) as User) : undefined
  );
  {% endif %}
  const { data: {{ variable.id }}, isLoading, error } = useFetch<{{ variable.type }}> ( {
      findFunc: Queries.{{ find_func }},
      eventsFunc: Queries.{{ find_func }}Events,
      {% if where_arg %}where: {{ func_where }},{% endif %}
      {% if search_arg %}search: { {% for element in search_arg %} {{ element.id }} : {{ element.value }}, {% endfor %} },{% endif %}
      model: "{{ func_model }}",
      {% if owns_entry %}
      privateStream: {{ owns_entry }},
      {% endif %}
      {% if requires_auth %}accessToken: LoggedInUser.accessToken,{% endif %}
  } ) ;

  if (error) {
    return (
      <>
      {%- autoescape false -%}
        {{ on_error }}
      {% endautoescape -%}
      </>
    )
  };

  if (isLoading) {
    return (
      <>
      {%- autoescape false -%}
        {{ on_loading }}
      {% endautoescape -%}
      </>
    )
  };

  return (
    <>
      {%- autoescape false -%}
        {{ render_expression }}
      {% endautoescape -%}
    </>
    )
};

export default {{ id }};
