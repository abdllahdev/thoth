import { z } from 'zod';

{% for validator in list %}
export const {{ validator.id }}Validator = z.object({
  {% if validator.where %}
    where: z.object({
      {% for field in validator.where %}
        {{ field.id }}: z.string({
          required_error: '`{{ field.id }}` is required',
        })

        {% if field.type[0] == "number" %}
        .regex(/^\d+$/)
        .transform(({{ field.id }} : string) => parseInt({{ field.id }}, 10)),
        {% else %}
        ,
        {% endif %}
      {% endfor %}
    }).strict(),
  {% endif %}

  {% if validator.search %}
  search: z.object({
    {% for field in validator.search %}
      {% if field.type[0] == 'boolean' %}
      {{ field.id }}: z
        .enum(['true', 'false'])
        .transform((val) => (val === 'true' ? true : false))
        .optional(),
      {% elif field.type[0] == 'number' %}
      {{ field.id }}: z
        .string({
          required_error: '`{{ field.id }}` is required',
        })
        .regex(/^\d+$/)
        .transform(({{ field.id }}: string) => parseInt({{ field.id }}, 10))
        .optional(),
      {% else %}
      {{ field.id }}: z.{{ field.type[0]  }}().optional(),
      {% endif %}
    {% endfor %}
  }).strict(),
  {% endif %}

  {% if validator.data %}
  data: z.object({
    {% for field in validator.data %}
      {% if field.field %}
        {{ field.field.id }}: z.{{ field.field.type[0]  }}({
          required_error: '`{{ field.field.id }}` is required',
        })
        {% for type in field.field.type %}
          {% if type == "optional" or type == "array" %}
          .{{ type  }}()
          {% endif %}
        {% endfor %}
        ,
      {% endif %}

      {% if field.object %}
        {{ field.object.id }}: z.object({
          connect: z.object({
            {{ field.object.field.id }}: z.{{ field.object.field.type[0]  }}({
              required_error: '`{{ field.object.field.id }}` is required',
            })
            {% for type in field.object.field.type %}
              {% if type == "optional" or type == "array" %}
              .{{ type  }}()
              {% endif %}
            {% endfor %}
            ,
          })
        }),
      {% endif %}
    {% endfor %}
  }).strict(),
  {% endif %}
});
{% endfor %}
