import { Request, Response, NextFunction } from 'express';
import httpStatus from 'http-status';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import prismaClient from '../utils/prismaClient';
import ApiError from '../utils/apiError';

export const signup = async (
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  try {
    const payload = {
      data: req.validatedPayload.data,
    };

    const existingUser = await prismaClient.{{ user_model }}.findUnique({
      where: {
        {{ username_field }}: payload.data.{{ username_field }},
      },
    });

    if (existingUser)
      throw new ApiError({
        status: httpStatus.BAD_REQUEST,
        code: 'bad_request',
        error: 'bad_request',
        message: '{{ username_field }} already used',
        details: [],
      });

    payload.data.{{ password_field }} = bcrypt.hashSync(payload.data.{{ password_field }}, 12);

    await prismaClient.{{ user_model }}.create(payload);
    res.status(httpStatus.CREATED).json();
  } catch (err) {
    next(err);
  }
};

export const login = async (
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  try {
    const payload = {
      data: req.validatedPayload.data,
    };

    const existingUser = await prismaClient.{{ user_model }}.findUnique({
      where: {
        {{ username_field }}: payload.data.{{ username_field }},
      },
    });

    if (!existingUser)
      throw new ApiError({
        status: httpStatus.FORBIDDEN,
        code: 'forbidden',
        error: 'forbidden',
        message: 'Invalid login credentials',
        details: [],
      });

    const validPassword = await bcrypt.compare(
      payload.data.{{ password_field }},
      existingUser.{{ password_field }},
    );

    if (!validPassword)
      throw new ApiError({
        status: httpStatus.FORBIDDEN,
        code: 'forbidden',
        error: 'forbidden',
        message: 'Invalid login credentials',
        details: [],
      });

    const accessToken = jwt.sign(
      { userId: existingUser.{{ id_field }} },
      process.env.JWT_ACCESS_SECRET as string,
      {},
    );

    const { {{ password_field }}, ...loggedUser } = existingUser;

    res.status(httpStatus.OK).json({ ...loggedUser, accessToken });
  } catch (err) {
    console.log(err);
    next(err);
  }
};
