import { Request, Response, NextFunction } from 'express';
import httpStatus from 'http-status';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import prismaClient from '../utils/prismaClient';
import sse from '../utils/sse';
import ApiError from '../utils/apiError';

export const signup = async (
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  try {
    const payload = {
      data: req.validatedPayload.data,
    };

    const existingUser = await prismaClient.{{ user_model }}.findUnique({
      where: {
        {{ username_field }}: payload.data.{{ username_field }},
      },
    });

    if (existingUser)
      throw new ApiError({
        status: httpStatus.BAD_REQUEST,
        code: 'bad_request',
        error: 'bad_request',
        message: 'User sign up error',
        details: [
          {
            code: 'invalid_arguments',
            parameter: 'username',
            message: 'Username already used',
          },
        ],
      });

    payload.data.{{ password_field }} = bcrypt.hashSync(payload.data.{{ password_field }}, 12);

    const user = await prismaClient.user.create(payload);

    const result = await prismaClient.{{ user_model }}.update({
      where: { {{ id_field }}: user.{{ id_field }} },
      data: { {{ is_online_field }}: true, {{ last_active_field }}: new Date() },
    });

    sse.send(result, 'update{{ user_model }}');

    const accessToken = jwt.sign(
      { id: user.id },
      process.env.JWT_ACCESS_SECRET as string,
      {},
    );

    const { password, ...createdUser } = user;
    res.status(httpStatus.CREATED).json({ ...createdUser, accessToken });
  } catch (err) {
    next(err);
  }
};

export const login = async (
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  try {
    const payload = {
      data: req.validatedPayload.data,
    };

    const existingUser = await prismaClient.{{ user_model }}.findUnique({
      where: {
        {{ username_field }}: payload.data.{{ username_field }},
      },
    });

    if (!existingUser)
      throw new ApiError({
        status: httpStatus.FORBIDDEN,
        code: 'forbidden',
        error: 'forbidden',
        message: 'Invalid login credentials',
        details: [],
      });

    const validPassword = await bcrypt.compare(
      payload.data.{{ password_field }},
      existingUser.{{ password_field }},
    );

    if (!validPassword)
      throw new ApiError({
        status: httpStatus.FORBIDDEN,
        code: 'forbidden',
        error: 'forbidden',
        message: 'Invalid login credentials',
        details: [],
      });

    const accessToken = jwt.sign(
      { id: existingUser.{{ id_field }} },
      process.env.JWT_ACCESS_SECRET as string,
      {},
    );

    const result = await prismaClient.{{ user_model }}.update({
      where: { {{ id_field }}: existingUser.{{ id_field }} },
      data: { {{ is_online_field }}: true, {{ last_active_field }}: new Date() },
    });

    sse.send(result, 'update{{ user_model }}');

    const { {{ password_field }}, ...loggedUser } = existingUser;

    res.status(httpStatus.OK).json({ ...loggedUser, accessToken });
  } catch (err) {
    console.log(err);
    next(err);
  }
};


export const heartbeat = async (
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  try {
  const userId = req.user.id;

  const result = await prismaClient.{{ user_model }}.update({
    where: { {{ id_field }}: userId },
    data: { {{ is_online_field }}: true, {{ last_active_field }}: new Date() },
  });

  sse.send(result, 'update{{ user_model }}');

  res.status(httpStatus.OK).send();
  } catch (err) {
    console.log(err);
    next(err);
  }
};
